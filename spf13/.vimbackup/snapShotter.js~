var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var shelljs = require('shelljs');
var spawn = require('child_process').spawn;
var util = require('util');
var assertions = require('./assert');



///--- Globals

var assertFunction = assertions.assertFunction;
var assertNumber = assertions.assertNumber;
var assertObject = assertions.assertObject;
var assertString = assertions.assertString;

function SnapShotter(options) {
  assertObject('options', options);
  assertObject('options.log', options.log);
  assertString('options.dataset', options.dataset);
  assertNumber('options.pollInterval', options.pollInterval);
  assertString('options.snapshotDir', options.snapshotDir);
  assertNumber('options.snapshotNumber', options.snapshotNumber);

  EventEmitter.call(this);

  this.log = options.log;
  this.pollInterval = options.pollInterval;
  this.dataset = options.dataset;
  this.snapshotDir = options.snapshotDir;
  this.snapshotNumber = options.snapshotNumber;
  this.log.info('initialized snapshotter with options', options);
}

module.exports = SnapShotter;
util.inherits(SnapShotter, EventEmitter);

SnapShotter.prototype.start = function start(callback) {
  var self = this;
  var log = self.log;

  log.info('starting snapshotter daemon');

  var snapshot = self.dataset + '@' + Date.now();
  // manually start the first time as setInterval waits the interval starting
  createSnapshot(self, snapshot, function(err) {
    if (err) {
      self.emit('err', err);
    }
  });

  var intervalId = setInterval(function() {
    var snapshot = self.dataset + '@' + Date.now();

    createSnapshot(self, snapshot, function(err) {
      if (err) {
        self.emit('err', err);
      }
    });

    var snapshots = shelljs.ls(self.snapshotDir);
    // sort snapshots by earliest ones first
    snapshots.sort(function(a, b) {
      return a - b;
    });

    log.debug('got snapshots', snapshots);
    // delete snapshots
    if (snapshots.length > self.snapshotNumber) {
      log.info('deleting snapshots as number of snapshots %s exceeds threshold',
               snapshots.length, self.snapshotNumber);

      for (var i = 0; i < snapshots.length - self.snapshotNumber; i++) {
        var delSnapshot = self.dataset + '@' + snapshots[i];

        deleteSnapshot(self, delSnapshot, function(err) {
          if (err) {
            self.emit('err', err);
          }
        });
      }
    }
  }, self.pollInterval);

  log.info('started snapshotter daemon');
  return callback();
};

function createSnapshot(self, snapshot, callback) {
  var log = self.log;
  log.info('writing snapshot', snapshot);
  var writeSnapshot = spawn('zfs', ['snapshot', snapshot]);

  writeSnapshot.stdout.on('data', function(data) {
    log.debug('writeSnapshot stdout: ', data.toString());
  });

  var msg;
  writeSnapshot.stderr.on('data', function(data) {
    var dataStr = data.toString();
    log.error('writeSnapshot stderr: ', dataStr);
    if (msg) {
      msg += dataStr;
    } else {
      msg = dataStr;
    }
    msg += data;
  });

  writeSnapshot.on('exit', function(code) {
    if (code != 0) {
      var err = {
        msg: msg,
        code: code,
      };
      log.error('unable to compete zfs_send', err);
      return callback(err);
    }

    log.info('completed snapshot', snapshot);
    return callback();
  });
}

function deleteSnapshot(self, snapshot, callback) {
  var log = self.log;
  log.info('deleting snapshot', snapshot);

  var delSnapshot = spawn('zfs', ['destroy', snapshot]);

  delSnapshot.stdout.on('data', function(data) {
    log.debug('delSnapshot stdout: ', data.toString());
  });

  var msg;
  delSnapshot.stderr.on('data', function(data) {
    var dataStr = data.toString();
    log.error('delSnapshot stderr: ', dataStr);
    if (msg) {
      msg += dataStr;
    } else {
      msg = dataStr;
    }
    msg += data;
  });

  delSnapshot.on('exit', function(code) {
    if (code != 0) {
      var err = {
        msg: msg,
        code: code,
      };
      log.error('unable to compete zfs_send', err);
      return callback(err);
    }

    log.info('completed snapshot', snapshot);
    return callback();
  });
}
